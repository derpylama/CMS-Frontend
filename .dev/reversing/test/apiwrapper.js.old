class WonkyCMSApiWrapper {
    constructor(baseUrl = "https://elias.ntigskovde.se/") {
        this.indexUrl = baseUrl + "index.php";
        this.fetchUrl = baseUrl + "php/getinfo.php";
        this.baseUrl = baseUrl;
    }

    // === JSON FUNCTIONS ===

    JsonToUrl(json) {
        const parts = [];

        const encode = (val) => encodeURIComponent(String(val)).replace(/%20/g, "+");
        const encodeColor = (val) => encodeURIComponent(String(val));

        // === Base page info ===
        const header = json.header || "";
        parts.push(`pageHeader=${encode(header)}`);
        parts.push(`pageLang=${encode(json.mainPageLang || "sv")}`);

        // === Standard Measurements flag must always be present ===
        const useStd = String(json.useStandardMeasurement) === "true";
        parts.push(`useStandardMeasurement=${useStd ? "true" : "false"}`);
        if (useStd) {
            if (json.standardUnitWidth) parts.push(`standardUnitWidth=${encode(json.standardUnitWidth)}`);
            if (json.standardUnitHeight) parts.push(`standardUnitHeight=${encode(json.standardUnitHeight)}`);
            if (json.standardMeasureUnitMargin) parts.push(`standardMeasureUnitMargin=${encode(json.standardMeasureUnitMargin)}`);
            if (json.standardMeasureUnitBorder) parts.push(`standardMeasureUnitBorder=${encode(json.standardMeasureUnitBorder)}`);
            if (json.standardMeasureUnitFont) parts.push(`standardMeasureUnitFont=${encode(json.standardMeasureUnitFont)}`);
        }

        // === Build div map (prefix -> divN) and parent links ===
        const { orderedPrefixes, prefixToDivName, prefixToParentDivName } = this._buildDivMap(json);

        // === Divs ===
        for (let i = 0; i < orderedPrefixes.length; i++) {
            const prefix = orderedPrefixes[i];
            const styles = json[`Style${prefix}`] || "";

            const width = this._getCSSValue(styles, "width");
            const height = this._getCSSValue(styles, "height");
            const display = this._getCSSValue(styles, "display");
            const bgColor = this._getCSSValue(styles, "background-color");
            const flow = this._getCSSValue(styles, "flex-flow");
            const justify = this._getCSSValue(styles, "justify-content");
            const align = this._getCSSValue(styles, "align-items");
            const paddingBot = this._getCSSValue(styles, "padding-bottom");

            // For the first div (root), do NOT add addDivToDiv[]
            if (i > 0) {
                const parentDivName = prefixToParentDivName[prefix];
                parts.push(`addDivToDiv[]=${parentDivName}`);
            }

            if (width) parts.push(`newDivWidth[]=${encode(width)}`);
            if (height) parts.push(`newDivHeight[]=${encode(height)}`);
            if (display) parts.push(`newDivDisplay[]=${encode(display)}`);
            if (bgColor) parts.push(`newDivColor[]=${encodeColor(bgColor)}`);
            if (flow) parts.push(`newDivFlow[]=${encode(flow)}`);
            if (justify) parts.push(`newDivJustify[]=${encode(justify)}`);
            if (align) parts.push(`newDivAlign[]=${encode(align)}`);
            if (paddingBot) parts.push(`newDivPaddingBot[]=${encode(paddingBot)}`);
        }

        // === Text info ===
        const texts = this._extractTexts(json, prefixToDivName);
        // Maintain the order similar to known-good
        for (const t of texts.headers) parts.push(`addTextInformationHeader[]=${encode(t)}`);
        for (const t of texts.headerSizes) parts.push(`addTextInformationHeaderSize[]=${encode(t)}`);
        for (const t of texts.headerColors) parts.push(`addTextInformationHeaderColor[]=${encodeColor(t)}`);
        for (const t of texts.divHeaders) parts.push(`addTextInformationDivHeader[]=${t}`);

        for (const t of texts.texts) parts.push(`addTextInformation[]=${encode(t)}`);
        for (const t of texts.textDivs) parts.push(`addTextInformationDiv[]=${t}`);
        for (const t of texts.textSizes) parts.push(`addTextInformationSize[]=${encode(t)}`);
        for (const t of texts.textColors) parts.push(`addTextInformationColor[]=${encodeColor(t)}`);

        // === Images (extract from JSON keys + styles) ===
        const images = this._extractImages(json, prefixToDivName);
        for (const img of images) {
            parts.push(`addImage[]=${encode(img.src)}`);
            parts.push(`addImageDiv[]=${img.div}`);
            if (img.display) parts.push(`addImageDisplay[]=${encode(img.display)}`);
            if (img.width) parts.push(`addImageWidth[]=${encode(img.width)}`);
            if (img.height) parts.push(`addImageHeight[]=${encode(img.height)}`);
            if (img.borderRadius) parts.push(`addImageBorderRadius[]=${encode(img.borderRadius)}`);
        }

        return `${this.baseUrl}?${parts.join("&")}`;
    }
  
    _extractDivs(json) {
        // Deprecated by _buildDivMap + inline extraction in JsonToUrl
        const divs = [];
        return divs;
    }
  
    _extractTexts(json, prefixToDivName) {
        const headers = [];
        const divHeaders = [];
        const texts = [];
        const textDivs = [];
        const headerSizes = [];
        const textSizes = [];
        const headerColors = [];
        const textColors = [];
    
        const headerRegex = /(textInfoRubrik\d+_sv)$/;
        for (const key in json) {
            if (headerRegex.test(key)) {
                headers.push(json[key]);
                const prefix = key.replace(/textInfoRubrik\d+_sv$/, "");
                divHeaders.push(prefixToDivName[prefix] || "div1");
            }
        }
    
        const textRegex = /(textInfo\d+_sv)$/;
        for (const key in json) {
            if (textRegex.test(key)) {
                texts.push(json[key]);
                const prefix = key.replace(/textInfo\d+_sv$/, "");
                textDivs.push(prefixToDivName[prefix] || "div1");
            }
        }
    
        // Pull style sizes/colors
        Object.keys(json).forEach((k) => {
            if (k.startsWith("StyletextInfoRubrik")) {
                const css = json[k];
                const fs = this._getCSSValue(css, "font-size");
                const col = this._getCSSValue(css, "color");
                if (fs) headerSizes.push(fs);
                if (col) headerColors.push(col);
            } else if (k.startsWith("StyletextInfo")) {
                const css = json[k];
                const fs = this._getCSSValue(css, "font-size");
                const col = this._getCSSValue(css, "color");
                if (fs) textSizes.push(fs);
                if (col) textColors.push(col);
            }
        });
    
        return { headers, divHeaders, texts, textDivs, headerSizes, textSizes, headerColors, textColors };
    }
  
    _getCSSValue(style, prop) {
        const regex = new RegExp(`${prop}\\s*:\\s*([^;]+)`);
        const match = style.match(regex);
        return match ? match[1].trim() : null;
    }
    
    _buildDivMap(json) {
        const prefixes = new Set();
        for (const key in json) {
            if (key.startsWith("Stylediv")) {
                const prefix = key.replace(/^Style/, "");
                prefixes.add(prefix);
            }
        }

        // Order by depth (shorter first), then lexicographically
        const orderedPrefixes = Array.from(prefixes).sort((a, b) => {
            const depthA = (a.match(/div\d+/g) || []).length;
            const depthB = (b.match(/div\d+/g) || []).length;
            if (depthA !== depthB) return depthA - depthB;
            return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
        });

        const prefixToDivName = {};
        const prefixToParentDivName = {};
        orderedPrefixes.forEach((prefix, idx) => {
            const divName = `div${idx + 1}`;
            prefixToDivName[prefix] = divName;

            // Determine parent by removing the last 'divN' segment
            const parentPrefix = prefix.replace(/div\d+$/, "");
            if (parentPrefix && prefixToDivName[parentPrefix]) {
                prefixToParentDivName[prefix] = prefixToDivName[parentPrefix];
            } else {
                prefixToParentDivName[prefix] = null;
            }
        });

        return { orderedPrefixes, prefixToDivName, prefixToParentDivName };
    }

    _extractImages(json, prefixToDivName) {
        const images = [];
        for (const key in json) {
            const m = key.match(/^(div[\ddiv]+)image(\d+)$/);
            if (m) {
                const prefix = m[1];
                const idx = m[2];
                const src = json[key];
                const style = json[`Styleimage${idx}`] || '';
                const width = this._getCSSValue(style, 'width');
                const height = this._getCSSValue(style, 'height');
                const borderRadius = this._getCSSValue(style, 'border-radius');
                const display = this._getCSSValue(style, 'display');
                images.push({
                    src,
                    div: prefixToDivName[prefix] || 'div1',
                    width,
                    height,
                    borderRadius,
                    display
                });
            }
        }
        return images;
    }
      

    async FetchJson(pageKey) {
        return fetch(`${this.fetchUrl}?action=getPageInfo&pageKey=${pageKey}`)
    }


    // === HTML FUNCTIONS ===

    JsonToHTML(json) { // Takes {"pageKey": "header", ...data...} and returns HTML string
        function addDiv(page, divPrefix, pageNumber, indentLevel = 0) {
            let html = '';
            const indent = '  '.repeat(indentLevel); // 2 spaces per indent
        
            // Get and clean style for the current div
            let blockStyle = page['Style' + divPrefix] || '';
            blockStyle = blockStyle.replace(/\b[\w-]+:\s*;/g, '').trim();
        
            html += `${indent}<div style="${blockStyle}">\n`;
        
            // Detect selected language (default = "sv")
            const selectedLangInput = document.querySelector(`input[name="language-${pageNumber}"]:checked`);
            const lang = selectedLangInput ? selectedLangInput.value : "sv";
        
            // --- Add text and images ---
            for (const key in page) {
                if (key.startsWith(divPrefix + 'textInfoRubrik') && key.endsWith('_' + lang)) {
                    const styleKey = 'Style' + key.replace(divPrefix, '').replace('_' + lang, '');
                    let style = (page[styleKey] || '').replace(/\b[\w-]+:\s*;/g, '').trim();
                    const value = page[key];
                    html += `${indent}  <h3 style="${style}">${value}</h3>\n`;
                }
                else if (key.startsWith(divPrefix + 'textInfo') && key.endsWith('_' + lang) && !key.startsWith(divPrefix + 'textInfoRubrik')) {
                    const styleKey = 'Style' + key.replace(divPrefix, '').replace('_' + lang, '');
                    let style = (page[styleKey] || '').replace(/\b[\w-]+:\s*;/g, '').trim();
                    const value = page[key];
                    html += `${indent}  <p style="${style}">${value}</p>\n`;
                }
                else if (key.startsWith(divPrefix + 'image')) {
                    const styleKey = 'Style' + key.replace(divPrefix, '');
                    let style = (page[styleKey] || '').replace(/\b[\w-]+:\s*;/g, '').trim();
                    html += `${indent}  <img style="${style}" src="${page[key]}" alt="Image">\n`;
                }
            }
        
            // --- Find nested divs ---
            const nestedDivPrefixes = new Set();
            for (const key in page) {
                const match = key.match(new RegExp('^(' + divPrefix + 'div\\d+)'));
                if (match) {
                    nestedDivPrefixes.add(match[1]);
                }
            }
        
            // --- Recursively add nested divs ---
            nestedDivPrefixes.forEach(nestedDivPrefix => {
                html += addDiv(page, nestedDivPrefix, pageNumber, indentLevel + 1);
            });
        
            html += `${indent}</div>\n`;
            return html;
        }

        // divPrefix is where in the wonky-hierarchy we start building (div1 is root body)
        // pageNumber is actually generated by the CMS, we just use it because it had to be applied
        return addDiv(json, 'div1', 'page1');
    }

    // MARK: The only allowed html we currently know is: <div>, <h3>, <p>, <img>
    HTMLToJson(html, header, mainPageLang = "sv", useStandardMeasurement = "false") { // Takes HTML and returns {"header": "<header>", ...data...}
        // Ensure header is defined else throw
        if (typeof header === 'undefined' || header === null || header.trim() === '') {
            throw new Error("Header is required");
        }
		// Generate JSON from HTML
		const result = {};
		// Inject "useStandardMeasurement" set to true
		result.useStandardMeasurement = useStandardMeasurement;
		result.mainPageLang = mainPageLang;
        result.header = header;

		if (typeof document === 'undefined') {
			// Environment does not support DOM; return minimal object
			return result;
		}

		const container = document.createElement('div');
		container.innerHTML = html || '';

		const rootDiv = container.querySelector('div');
		if (!rootDiv) return result;

		let headerCount = 0;
		let paragraphCount = 0;
		let imageCount = 0;
		const nestedDivCounters = new Map(); // per-prefix counters

		function getStyle(el) {
			const style = el.getAttribute('style');
			return style ? style.trim() : '';
		}

		function nextNestedIndex(prefix) {
			const current = nestedDivCounters.get(prefix) || 0;
			const next = current + 1;
			nestedDivCounters.set(prefix, next);
			return next;
		}

		function processDiv(divEl, prefix) {
			result['Style' + prefix] = getStyle(divEl);

			for (const child of Array.from(divEl.children)) {
				const tag = child.tagName.toLowerCase();
				if (tag === 'h3') {
					headerCount += 1;
					const key = prefix + 'textInfoRubrik' + headerCount + '_sv';
					const styleKey = 'StyletextInfoRubrik' + headerCount;
					result[key] = child.textContent || '';
					result[styleKey] = getStyle(child);
				} else if (tag === 'p') {
					paragraphCount += 1;
					const key = prefix + 'textInfo' + paragraphCount + '_sv';
					const styleKey = 'StyletextInfo' + paragraphCount;
					result[key] = child.textContent || '';
					result[styleKey] = getStyle(child);
				} else if (tag === 'img') {
					imageCount += 1;
					const key = prefix + 'image' + imageCount;
					const styleKey = 'Styleimage' + imageCount;
					result[key] = child.getAttribute('src') || '';
					result[styleKey] = getStyle(child);
				} else if (tag === 'div') {
					const n = nextNestedIndex(prefix);
					const childPrefix = prefix + 'div' + n;
					processDiv(child, childPrefix);
				}
			}
		}

		processDiv(rootDiv, 'div1');
		return result;
    }


    // === GENERAL ACTIONS ===

    async FetchAllPages() {
        result = {};
        await fetch(this.baseUrl)
            .then(response => response.text())
            .then(data => {
                try {
                    const pages = data.split("pages =")[1];
                    const pagesJson = pages.split("</script>")[0];
                    const lastSemicolonIndex = pagesJson.trim();
                    const json = lastSemicolonIndex.substring(0, lastSemicolonIndex.length - 1);
                    result = JSON.parse(json);
                } catch (e) {
                    console.error('JSON parse error:', e);
                }
            })
            .catch(err => {
                console.error('Request error:', err);
            });

        return result;

    } // Returns {"<pageKey>": {"header": "<header>", ...data...}, ...}

    async RemovePage(pageKey) {}

    async CreatePage(html) {} // Returns new pageKey (to get new pageKey find matching header in FetchAllPages response)

    async ReplacePage(pageKey, html) {}
}

// Setup for test
const api = new WonkyCMSApiWrapper("https://elias.ntigskovde.se/");

// Test HTML -> JSON -> HTML
// html = `<div style="width:80%;height:300px;display:flex;background-color:#a3d9a5;flex-flow:column;"><div style="width:90%;height:220px;display:flex;background-color:#ffffff;flex-flow:column;"><h3 style="font-size:24px;color:#003300;">Mini Koala Info</h3><p style="font-size:16px;color:#000000;">Detta är en liten ruta med en rubrik, text och en bild om koalan.</p><img style="width:80%;height:150px;border-radius:10px;display:block;" src="https://upload.wikimedia.org/wikipedia/commons/4/49/Koala_climbing_tree.jpg" alt="Image"></div></div>`;

// json = api.HTMLToJson(html);

// html2 = api.JsonToHTML(json);

// json2 = api.HTMLToJson(html2);

// html3 = api.JsonToHTML(json2);

// if (html2 === html3) {
//     console.log("HTML -> JSON -> HTML success");
// } else {
//     console.log("HTML -> JSON -> HTML failed");
//     console.log("Original HTML:");
//     console.log(html);
//     console.log("Reconstructed HTML:");
//     console.log(html2);
// }

// // Test JSON to URL
// // json3 = `
// // {
// //     "header": "testpage pt2",
// //     "mainPageLang": "sv",
// //     "secondaryPageLang": "en",
// //     "StyletextInfoRubrik1": "font-size:24px;color:#003300;",
// //     "StyletextInfo1": "font-size:16px;color:#000000;",
// //     "Styleimage1": "width:80%;height:150px;border-radius:10px;display:block;",
// //     "Stylediv1": "width:80%;height:300px;display:flex;background-color:#a3d9a5;flex-flow:column;",
// //     "Stylediv1div1": "width:90%;height:220px;display:flex;background-color:#ffffff;flex-flow:column;",
// //     "div1div1textInfoRubrik1_sv": "Mini Koala Info",
// //     "div1div1textInfoRubrik1_en": "Mini Koala Info",
// //     "div1div1textInfo1_sv": "Detta är en liten ruta med en rubrik, text och en bild om koalan.",
// //     "div1div1textInfo1_en": "This is a small box with a headline, text and a picture about the koala.",
// //     "div1div1image1": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/49\/Koala_climbing_tree.jpg"
// // }
// // `;

// // knownGood = `pageHeader=testpage+pt2&pageLang=sv&useStandardMeasurement=false&newDivWidth[]=80%25&newDivHeight[]=300px&newDivDisplay[]=flex&newDivColor[]=%23a3d9a5&newDivFlow[]=column&addDivToDiv[]=div1&newDivWidth[]=90%25&newDivHeight[]=220px&newDivDisplay[]=flex&newDivColor[]=%23ffffff&newDivFlow[]=column&addTextInformationHeader[]=Mini+Koala+Info&addTextInformationHeaderSize[]=24px&addTextInformationHeaderColor[]=%23003300&addTextInformationDivHeader[]=div2&addTextInformation[]=Detta+%C3%A4r+en+liten+ruta+med+en+rubrik%2C+text+och+en+bild+om+koalan.&addTextInformationDiv[]=div2&addTextInformationSize[]=16px&addTextInformationColor[]=%23000000&addImage[]=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F4%2F49%2FKoala_climbing_tree.jpg&addImageDiv[]=div2&addImageDisplay[]=block&addImageWidth[]=80%25&addImageHeight[]=150px&addImageBorderRadius[]=10px`;

// json3 = `
// {
//     "header": "Allt om Koalor pt2",
//     "mainPageLang": "sv",
//     "secondaryPageLang": "en",
//     "StyletextInfoRubrik1": "font-size:36px;color:#005500;",
//     "StyletextInfoRubrik2": "font-size:28px;color:#006633;",
//     "StyletextInfoRubrik3": "font-size:24px;color:green;",
//     "StyletextInfo1": "font-size:18px;color:#003300;",
//     "StyletextInfo2": "font-size:16px;color:#666600;",
//     "StyletextInfo3": "font-size:18px;color:#ff6600;",
//     "StyletextInfo4": "font-size:16px;color:#005500;",
//     "StyletextInfo5": "font-size:14px;",
//     "Styleimage1": "width:100%;height:250px;border-radius:10px;display:block;",
//     "Styleimage2": "width:80%;height:200px;border-radius:15px;display:block;",
//     "Styleimage3": "width:90%;height:180px;border-radius:20px;display:block;",
//     "Styleimage4": "width:70%;height:140px;border-radius:25px;display:block;",
//     "Stylediv1": "width:100%;height:650px;display:flex;background-color:#d6d6d6;flex-flow:column;justify-content:space-around;padding-bottom:25px;",
//     "Stylediv1div1": "width:80%;height:300px;display:flex;background-color:#a3d9a5;flex-flow:row;",
//     "Stylediv1div2": "width:80%;height:250px;display:flex;background-color:#ffe4b5;flex-flow:column;",
//     "Stylediv1div3": "width:18%;height:100px;display:flex;background-color:#ffe4ff;flex-flow:column;",
//     "Stylediv1div2div1": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "Stylediv1div2div2": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "Stylediv1div2div3": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "div1textInfoRubrik1_sv": "Koalor – Allmänt",
//     "div1textInfoRubrik1_en": "Koalas – General",
//     "div1div1textInfoRubrik2_sv": "Fakta om Koalor",
//     "div1div1textInfoRubrik2_en": "Facts about Koalas",
//     "div1div2textInfoRubrik3_sv": "Roliga fakta",
//     "div1div2textInfoRubrik3_en": "Fun facts",
//     "div1textInfo1_sv": "Koalor är små tåliga trädlevande djur från Australien.",
//     "div1textInfo1_en": "Koalas are small, hardy, arboreal animals from Australia.",
//     "div1div1textInfo2_sv": "De är kända för att äta eukalyptusblad.",
//     "div1div1textInfo2_en": "They are known to eat eucalyptus leaves.",
//     "div1div1textInfo3_sv": "Koalor äter nästan uteslutande eukalyptusblad.",
//     "div1div1textInfo3_en": "Koalas eat almost exclusively eucalyptus leaves.",
//     "div1div2textInfo4_sv": "Koalor sover upp till 20 timmar per dag.",
//     "div1div2textInfo4_en": "Koalas sleep up to 20 hours per day.",
//     "div1div2textInfo5_sv": "Koalor har starka klor för att klättra i träd.",
//     "div1div2textInfo5_en": "Koalas have strong claws for climbing trees.",
//     "div1div2textInfo6_sv": "Koalor kommunicerar med olika ljud, från snarkningar till skrik.",
//     "div1div2textInfo6_en": "Koalas communicate with a variety of sounds, from snoring to screaming.",
//     "div1div2textInfo7_sv": "test",
//     "div1div2textInfo7_en": "test",
//     "div1image1": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/49\/Koala_climbing_tree.jpg",
//     "div1div1image2": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e9\/Koala_eating_eucalyptus_leaf.jpg",
//     "div1div2image3": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/08\/Koala_sleeping_in_tree.jpg",
//     "div1div2image4": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/14\/Koala_close_up.jpg"
// }
// `;

// knownGood = `pageHeader=Allt+om+Koalor+pt2&pageLang=sv&useStandardMeasurement=false&addDivToDiv[]=div1&newDivWidth[]=100%25&newDivHeight[]=650px&newDivDisplay[]=flex&newDivColor[]=%23d6d6d6&newDivFlow[]=column&addDivToDiv[]=div1&newDivWidth[]=80%25&newDivHeight[]=300px&newDivDisplay[]=flex&newDivColor[]=%23a3d9a5&newDivFlow[]=row&newDivJustify[]=space-around&newDivAlign=center&addDivToDiv[]=div1&newDivWidth[]=80%25&newDivHeight[]=250px&newDivDisplay[]=flex&newDivColor[]=%23ffe4b5&newDivFlow[]=column&newDivPaddingBot[]=25px&addDivToDiv[]=div3&newDivWidth[]=18%25&newDivHeight[]=100px&newDivDisplay[]=flex&newDivColor[]=%23ffe4ff&newDivFlow[]=column&addDivToDiv[]=div3&newDivWidth[]=18%25&newDivHeight[]=100px&newDivDisplay[]=flex&newDivColor[]=%23ffe4ff&addDivToDiv[]=div3&newDivWidth[]=18%25&newDivHeight[]=100px&newDivDisplay[]=flex&newDivColor[]=%23ffe4ff&addDivToDiv[]=div3&newDivWidth[]=18%25&newDivHeight[]=100px&newDivDisplay[]=flex&newDivColor[]=%23ffe4ff&addTextInformationHeader[]=Koalor+%E2%80%93+Allm%C3%A4nt&addTextInformationHeader[]=Fakta+om+Koalor&addTextInformationHeader[]=Roliga+fakta&addTextInformationDivHeader[]=div1&addTextInformationDivHeader[]=div2&addTextInformationDivHeader[]=div3&addTextInformation[]=Koalor+%C3%A4r+sm%C3%A5+t%C3%A5liga+tr%C3%A4dlevande+djur+fr%C3%A5n+Australien.&addTextInformation[]=De+%C3%A4r+k%C3%A4nda+f%C3%B6r+att+%C3%A4ta+eukalyptusblad.&addTextInformation[]=Koalor+%C3%A4ter+n%C3%A4stan+uteslutande+eukalyptusblad.&addTextInformation[]=Koalor+sover+upp+till+20+timmar+per+dag.&addTextInformation[]=Koalor+har+starka+klor+f%C3%B6r+att+kl%C3%A4ttra+i+tr%C3%A4d.&addTextInformation[]=Koalor+kommunicerar+med+olika+ljud%2C+fr%C3%A5n+snarkningar+till+skrik.&addTextInformation[]=test&addTextInformationDiv[]=div1&addTextInformationDiv[]=div2&addTextInformationDiv[]=div2&addTextInformationDiv[]=div3&addTextInformationDiv[]=div3&addTextInformationDiv[]=div3&addTextInformationDiv[]=div3&addTextInformationHeaderSize[]=36px&addTextInformationHeaderSize[]=28px&addTextInformationHeaderSize[]=24px&addTextInformationSize[]=18px&addTextInformationSize[]=16px&addTextInformationSize[]=18px&addTextInformationSize[]=16px&addTextInformationSize[]=14px&addTextInformationHeaderColor[]=%23005500&addTextInformationHeaderColor[]=%23006633&addTextInformationHeaderColor[]=green&addTextInformationColor[]=%23003300&addTextInformationColor[]=%23666600&addTextInformationColor[]=%23ff6600&addTextInformationColor[]=%23005500&addImage[]=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F4%2F49%2FKoala_climbing_tree.jpg&addImageDiv[]=div1&addImageDisplay[]=block&addImageWidth[]=100%25&addImageHeight[]=250px&addImageBorderRadius[]=10px&addImage[]=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fe%2Fe9%2FKoala_eating_eucalyptus_leaf.jpg&addImageDiv[]=div2&addImageDisplay[]=block&addImageWidth[]=80%25&addImageHeight[]=200px&addImageBorderRadius[]=15px&addImage[]=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F0%2F08%2FKoala_sleeping_in_tree.jpg&addImageDiv[]=div3&addImageDisplay[]=block&addImageWidth[]=90%25&addImageHeight[]=180px&addImageBorderRadius[]=20px&addImage[]=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F1%2F14%2FKoala_close_up.jpg&addImageDiv[]=div3&addImageDisplay[]=block&addImageWidth[]=70%25&addImageHeight[]=140px&addImageBorderRadius[]=25px`;

// data = JSON.parse(json3);

// url = api.JsonToUrl(data);

// // remove "https://elias.ntigskovde.se/?" from url for comparison
// url = url.replace("https://elias.ntigskovde.se/?", "");

// if (url === knownGood) {
//     console.log("JSON -> URL success");
//     console.log(url);
//     console.log(knownGood);
// }
// else {
//     console.log("JSON -> URL failed");
//     console.log("Generated URL:");
//     console.log(url);
//     console.log("Known good URL:");
//     console.log(knownGood);
// }



html = `<div style="width:100%;height:650px;display:flex;background-color:#d6d6d6;flex-flow:column;justify-content:space-around;padding-bottom:25px;"><h3 style="font-size:36px;color:#005500;">Koalor – Allmänt</h3><p style="font-size:18px;color:#003300;">Koalor är små tåliga trädlevande djur från Australien.</p><img style="width:100%;height:250px;border-radius:10px;display:block;" src="https://upload.wikimedia.org/wikipedia/commons/4/49/Koala_climbing_tree.jpg" alt="Image"><div style="width:80%;height:300px;display:flex;background-color:#a3d9a5;flex-flow:row;"><h3 style="font-size:28px;color:#006633;">Fakta om Koalor</h3><p style="font-size:16px;color:#666600;">De är kända för att äta eukalyptusblad.</p><p style="font-size:18px;color:#ff6600;">Koalor äter nästan uteslutande eukalyptusblad.</p><img style="width:80%;height:200px;border-radius:15px;display:block;" src="https://upload.wikimedia.org/wikipedia/commons/e/e9/Koala_eating_eucalyptus_leaf.jpg" alt="Image"></div><div style="width:80%;height:250px;display:flex;background-color:#ffe4b5;flex-flow:column;"><h3 style="font-size:24px;color:green;">Roliga fakta</h3><p style="font-size:16px;color:#005500;">Koalor sover upp till 20 timmar per dag.</p><p style="font-size:14px;">Koalor har starka klor för att klättra i träd.</p><p style="">Koalor kommunicerar med olika ljud, från snarkningar till skrik.</p><p style="">test</p><img style="width:90%;height:180px;border-radius:20px;display:block;" src="https://upload.wikimedia.org/wikipedia/commons/0/08/Koala_sleeping_in_tree.jpg" alt="Image"><img style="width:70%;height:140px;border-radius:25px;display:block;" src="https://upload.wikimedia.org/wikipedia/commons/1/14/Koala_close_up.jpg" alt="Image"></div></div>`;

// json = `
// {
//     "mainPageLang": "sv",
//     "StyletextInfoRubrik1": "font-size:36px;color:#005500;",
//     "StyletextInfoRubrik2": "font-size:28px;color:#006633;",
//     "StyletextInfoRubrik3": "font-size:24px;color:green;",
//     "StyletextInfo1": "font-size:18px;color:#003300;",
//     "StyletextInfo2": "font-size:16px;color:#666600;",
//     "StyletextInfo3": "font-size:18px;color:#ff6600;",
//     "StyletextInfo4": "font-size:16px;color:#005500;",
//     "StyletextInfo5": "font-size:14px;",
//     "Styleimage1": "width:100%;height:250px;border-radius:10px;display:block;",
//     "Styleimage2": "width:80%;height:200px;border-radius:15px;display:block;",
//     "Styleimage3": "width:90%;height:180px;border-radius:20px;display:block;",
//     "Styleimage4": "width:70%;height:140px;border-radius:25px;display:block;",
//     "Stylediv1": "width:100%;height:650px;display:flex;background-color:#d6d6d6;flex-flow:column;justify-content:space-around;padding-bottom:25px;",
//     "Stylediv1div1": "width:80%;height:300px;display:flex;background-color:#a3d9a5;flex-flow:row;",
//     "Stylediv1div2": "width:80%;height:250px;display:flex;background-color:#ffe4b5;flex-flow:column;",
//     "Stylediv1div3": "width:18%;height:100px;display:flex;background-color:#ffe4ff;flex-flow:column;",
//     "Stylediv1div2div1": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "Stylediv1div2div2": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "Stylediv1div2div3": "width:18%;height:100px;display:flex;background-color:#ffe4ff;",
//     "div1textInfoRubrik1_sv": "Koalor – Allmänt",
//     "div1div1textInfoRubrik2_sv": "Fakta om Koalor",
//     "div1div2textInfoRubrik3_sv": "Roliga fakta",
//     "div1textInfo1_sv": "Koalor är små tåliga trädlevande djur från Australien.",
//     "div1div1textInfo2_sv": "De är kända för att äta eukalyptusblad.",
//     "div1div1textInfo3_sv": "Koalor äter nästan uteslutande eukalyptusblad.",
//     "div1div2textInfo4_sv": "Koalor sover upp till 20 timmar per dag.",
//     "div1div2textInfo5_sv": "Koalor har starka klor för att klättra i träd.",
//     "div1div2textInfo6_sv": "Koalor kommunicerar med olika ljud, från snarkningar till skrik.",
//     "div1div2textInfo7_sv": "test",
//     "div1image1": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/49\/Koala_climbing_tree.jpg",
//     "div1div1image2": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e9\/Koala_eating_eucalyptus_leaf.jpg",
//     "div1div2image3": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/0\/08\/Koala_sleeping_in_tree.jpg",
//     "div1div2image4": "https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/14\/Koala_close_up.jpg"
// }
// `;

// json2 = api.HTMLToJson(html);

// // Compare: Foreach k,v pair in json check that it exists in json2 also check that the values are equal, console log missing key, value missmatch {x} {y}, and matching key
// data = JSON.parse(json);

// for (const k in data) {
//     if (!(k in json2)) {
//         console.log(`Missing key: ${k}`);
//     } else if (data[k] !== json2[k]) {
//         console.log(`Value mismatch for key ${k}: "${data[k]}" vs "${json2[k]}"`);
//     } else {
//         //console.log(`Matching key: ${k}`);
//     }
// }

// console.log(json2);

json = api.HTMLToJson(html);

url = api.JsonToUrl(json);

// Remove "https://elias.ntigskovde.se/?" from url for easier reading
url = url.replace("https://elias.ntigskovde.se/?", "");

console.log(url);